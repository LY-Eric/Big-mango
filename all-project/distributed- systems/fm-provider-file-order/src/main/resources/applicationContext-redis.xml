<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 配置扫描路径 -->
	<context:component-scan base-package="com.ynet.finmall.redis"></context:component-scan>

	<!-- 配置redis数据库连接池 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="300" /> <!-- 最大能够保持idel状态的对象数 -->
		<property name="maxTotal" value="60000" /> <!-- 最大分配的对象数 -->
		<property name="testOnBorrow" value="true" /> <!-- 当调用borrow Object方法时，是否进行有效性检查 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!-- <property name="maxActive" value="${redis.maxActive}" /> -->
		<!-- <property name="maxIdle" value="${redis.maxIdle}" /> -->
		<!-- <property name="testOnBorrow" value="${redis.testOnBorrow}"/> -->
		<!-- <property name="testOnReturn" value="${redis.testOnReturn}"/> -->
		<!-- <property name="testWhileIdle" value="true"/> -->
	</bean>

	<!-- jedis单件部署配置 ps：host必须加type=java.lang.String 不然报错 -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool" scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" type="java.lang.String" />
		<constructor-arg index="2" value="${redis.port}" />
	</bean>

	<!-- jedis集群部署配置 -->
	<bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool"
		scope="singleton">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1">
			<list>
				<!-- 多节点则配置多个JedisShardInfo -->
				<bean class="redis.clients.jedis.JedisShardInfo">
					<constructor-arg name="host" value="${redis.host}" />
					<constructor-arg name="port" value="${redis.port}" />
					<constructor-arg name="soTimeout" value="${redis.soTimeout}" />
					<constructor-arg name="connectionTimeout" value="${redis.connectionTimeout}" />
					<constructor-arg name="weight" value="1" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
</beans>